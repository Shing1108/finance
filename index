<!DOCTYPE html>

<html lang="zh-TW">

<head>

    <meta charset="UTF-8">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>個人財務追蹤器</title>

    <script src="https://cdn.tailwindcss.com"></script>

    <link href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.0.0/css/all.css" rel="stylesheet">

    <script>

        tailwind.config = {

            darkMode: 'class',

            theme: {

                extend: {

                    colors: {

                        primary: '#5D5CDE',

                        'primary-dark': '#4645B2',

                        'primary-light': '#7877E6',

                    }

                }

            }

        }

    </script>

    <style>

        .emoji-btn {

            transition: transform 0.2s;

        }

        .emoji-btn:hover {

            transform: scale(1.1);

        }

        .slide-enter {

            animation: slideIn 0.3s ease forwards;

        }

        @keyframes slideIn {

            from {

                transform: translateY(20px);

                opacity: 0;

            }

            to {

                transform: translateY(0);

                opacity: 1;

            }

        }

        .modal {

            display: none;

            position: fixed;

            z-index: 1000;

            left: 0;

            top: 0;

            width: 100%;

            height: 100%;

            overflow: auto;

            background-color: rgba(0,0,0,0.5);

        }

        .modal-content {

            background-color: #fefefe;

            margin: 15% auto;

            padding: 20px;

            border-radius: 8px;

            width: 90%;

            max-width: 500px;

            position: relative;

        }

        .close {

            position: absolute;

            top: 10px;

            right: 15px;

            color: #aaa;

            font-size: 28px;

            font-weight: bold;

            cursor: pointer;

        }

        .tab-content {

            display: none;

        }

        .tab-content.active {

            display: block;

        }

        .dark .bg-white {

            background-color: #222;

            color: #fff;

        }

        .dark .bg-gray-50 {

            background-color: #181818;

            color: #fff;

        }

        .dark .bg-gray-100 {

            background-color: #2a2a2a;

            color: #fff;

        }

        .dark .text-gray-800 {

            color: #eee;

        }

        .dark .text-gray-700 {

            color: #ddd;

        }

        .dark .text-gray-600 {

            color: #ccc;

        }

        .dark .border-gray-200 {

            border-color: #444;

        }

        .dark .modal-content {

            background-color: #222;

            color: #fff;

        }

        .dark select, .dark input, .dark textarea {

            background-color: #333;

            color: #fff;

            border-color: #555;

        }

        .notification {

            position: fixed;

            top: 20px;

            right: 20px;

            max-width: 300px;

            background-color: #fff;

            border-radius: 8px;

            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);

            z-index: 1000;

            overflow: hidden;

            display: none;

        }

        .dark .notification {

            background-color: #333;

            color: #fff;

        }

        /* Import/Export modal styling */

        .import-export-buttons {

            display: flex;

            gap: 10px;

            margin-top: 20px;

        }

        .import-export-buttons button {

            flex: 1;

            padding: 10px;

            border-radius: 8px;

        }

        #exportDataArea {

            width: 100%;

            height: 150px;

            margin-top: 10px;

            border-radius: 8px;

            padding: 10px;

            resize: none;

        }

        #importDataArea {

            width: 100%;

            height: 150px;

            margin-top: 10px;

            margin-bottom: 15px;

            border-radius: 8px;

            padding: 10px;

            resize: none;

        }

    </style>

</head>

<body class="bg-gray-50 min-h-screen">

    <div class="container mx-auto px-4 py-8 max-w-4xl">

        <!-- Header -->

        <header class="mb-6">

            <div class="flex justify-between items-center">

                <h1 class="text-3xl font-bold text-primary">

                    <span class="mr-2">💰</span>個人財務追蹤器

                </h1>

                <div class="flex space-x-2">

                    <!-- New Day Button -->

                    <button id="newDayBtn" class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition">

                        <span class="mr-1">🌅</span>開啟新的一天

                    </button>

                    <!-- Import/Export Button -->

                    <button id="importExportBtn" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition">

                        <span class="mr-1">💾</span>匯入/匯出

                    </button>

                </div>

            </div>

            <!-- Balance Summary -->

            <div class="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">

                <div class="bg-white p-4 rounded-lg shadow slide-enter border-l-4 border-blue-500">

                    <div class="text-gray-600">總資產</div>

                    <div class="text-2xl font-bold text-blue-600">$ <span id="totalBalance">0.00</span></div>

                </div>

                <div class="bg-white p-4 rounded-lg shadow slide-enter border-l-4 border-green-500">

                    <div class="text-gray-600">今日收入</div>

                    <div class="text-2xl font-bold text-green-600">$ <span id="todayIncome">0.00</span></div>

                </div>

                <div class="bg-white p-4 rounded-lg shadow slide-enter border-l-4 border-red-500">

                    <div class="text-gray-600">今日支出</div>

                    <div class="text-2xl font-bold text-red-600">$ <span id="todayExpense">0.00</span></div>

                </div>

            </div>

        </header>



        <!-- Navigation Tabs -->

        <div class="mb-6 border-b border-gray-200">

            <ul class="flex flex-wrap -mb-px" id="tabsContainer">

                <li class="mr-2">

                    <button data-tab="dashboard" class="tab-btn inline-block py-2 px-4 border-b-2 font-medium text-primary border-primary">

                        <span class="mr-1">📊</span>儀表板

                    </button>

                </li>

                <li class="mr-2">

                    <button data-tab="accounts" class="tab-btn inline-block py-2 px-4 border-b-2 font-medium text-gray-500 hover:text-gray-700 border-transparent">

                        <span class="mr-1">💳</span>戶口管理

                    </button>

                </li>

                <li class="mr-2">

                    <button data-tab="transactions" class="tab-btn inline-block py-2 px-4 border-b-2 font-medium text-gray-500 hover:text-gray-700 border-transparent">

                        <span class="mr-1">📝</span>記賬

                    </button>

                </li>

                <li class="mr-2">

                    <button data-tab="budget" class="tab-btn inline-block py-2 px-4 border-b-2 font-medium text-gray-500 hover:text-gray-700 border-transparent">

                        <span class="mr-1">⚙️</span>預算設定

                    </button>

                </li>

                <li class="mr-2">

                    <button data-tab="stats" class="tab-btn inline-block py-2 px-4 border-b-2 font-medium text-gray-500 hover:text-gray-700 border-transparent">

                        <span class="mr-1">📈</span>統計分析

                    </button>

                </li>

            </ul>

        </div>



        <!-- Main Content -->

        <main>

            <!-- Dashboard -->

            <div id="dashboard" class="tab-content active slide-enter">

                <div class="mb-8">

                    <h2 class="text-xl font-bold mb-4 text-gray-800"><span class="mr-2">📅</span>今日交易</h2>

                    <div id="todayTransactionsEmpty" class="bg-white p-4 rounded-lg shadow text-center text-gray-500">

                        今日尚無交易記錄

                    </div>

                    <div id="todayTransactionsTable" class="bg-white rounded-lg shadow overflow-hidden" style="display: none;">

                        <table class="min-w-full divide-y divide-gray-200">

                            <thead class="bg-gray-50">

                                <tr>

                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">類型</th>

                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">戶口</th>

                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">類別</th>

                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">金額</th>

                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">備註</th>

                                </tr>

                            </thead>

                            <tbody id="todayTransactionsList" class="bg-white divide-y divide-gray-200">

                                <!-- Today transactions will be inserted here -->

                            </tbody>

                        </table>

                    </div>

                </div>



                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">

                    <!-- Budget Status -->

                    <div>

                        <h2 class="text-xl font-bold mb-4 text-gray-800"><span class="mr-2">📊</span>預算狀態</h2>

                        <div id="noBudget" class="bg-white p-6 rounded-lg shadow text-center">

                            <p class="text-gray-500 mb-4">尚未設定預算</p>

                            <button id="goBudgetBtn" class="bg-primary text-white px-4 py-2 rounded-md hover:bg-primary-dark transition">

                                設定預算

                            </button>

                        </div>

                        <div id="budgetStatus" class="bg-white p-6 rounded-lg shadow" style="display: none;">

                            <div class="mb-2 flex justify-between">

                                <span class="text-gray-600">預算週期:</span>

                                <span id="budgetCycleText"></span>

                            </div>

                            <div class="mb-2 flex justify-between">

                                <span class="text-gray-600">總預算:</span>

                                <span class="font-medium">$<span id="budgetAmount"></span></span>

                            </div>

                            <div class="mb-2 flex justify-between">

                                <span class="text-gray-600">已使用:</span>

                                <span class="font-medium">$<span id="budgetUsed"></span></span>

                            </div>

                            <div class="mb-2 flex justify-between">

                                <span class="text-gray-600">剩餘預算:</span>

                                <span id="budgetRemaining" class="font-medium"></span>

                            </div>

                            <div class="mt-4">

                                <div class="w-full bg-gray-200 rounded-full h-2.5">

                                    <div id="budgetBar" class="h-2.5 rounded-full bg-primary"></div>

                                </div>

                                <div id="budgetPercentage" class="text-right text-sm mt-1 text-gray-500"></div>

                            </div>

                        </div>

                    </div>



                    <!-- Recent Transactions -->

                    <div>

                        <h2 class="text-xl font-bold mb-4 text-gray-800"><span class="mr-2">🕒</span>近期交易</h2>

                        <div id="noTransactions" class="bg-white p-4 rounded-lg shadow text-center text-gray-500">

                            尚無交易記錄

                        </div>

                        <div id="recentTransactions" class="bg-white rounded-lg shadow overflow-hidden" style="display: none;">

                            <ul id="recentTransactionsList" class="divide-y divide-gray-200">

                                <!-- Recent transactions will be inserted here -->

                            </ul>

                            <div class="p-4 border-t border-gray-200">

                                <button id="viewAllTransactionsBtn" class="text-primary hover:text-primary-dark text-sm font-medium flex items-center">

                                    查看全部交易

                                    <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">

                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>

                                    </svg>

                                </button>

                            </div>

                        </div>

                    </div>

                </div>

            </div>



            <!-- Accounts Management -->

            <div id="accounts" class="tab-content slide-enter">

                <div id="accountsGrid" class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">

                    <!-- Account cards will be inserted here -->

                </div>

                

                <!-- Transfer Money Between Accounts -->

                <div class="bg-white p-6 rounded-lg shadow mb-6">

                    <h3 class="text-lg font-bold mb-4"><span class="mr-2">🔄</span>轉賬</h3>

                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">

                        <div>

                            <label class="block text-gray-700 mb-2">從戶口</label>

                            <select id="transferFrom" class="w-full p-2 border border-gray-300 rounded-md text-base">

                                <option value="" disabled selected>選擇戶口</option>

                                <!-- From account options will be inserted here -->

                            </select>

                        </div>

                        <div>

                            <label class="block text-gray-700 mb-2">至戶口</label>

                            <select id="transferTo" class="w-full p-2 border border-gray-300 rounded-md text-base">

                                <option value="" disabled selected>選擇戶口</option>

                                <!-- To account options will be inserted here -->

                            </select>

                        </div>

                        <div>

                            <label class="block text-gray-700 mb-2">金額</label>

                            <input type="number" id="transferAmount" placeholder="輸入金額" class="w-full p-2 border border-gray-300 rounded-md text-base">

                        </div>

                    </div>

                    <div class="mt-4 flex justify-end">

                        <button id="transferBtn" class="bg-primary text-white px-4 py-2 rounded-md hover:bg-primary-dark transition">

                            確認轉賬

                        </button>

                    </div>

                </div>

            </div>



            <!-- Transactions (Record Income/Expense) -->

            <div id="transactions" class="tab-content slide-enter">

                <div class="bg-white p-6 rounded-lg shadow">

                    <h2 class="text-xl font-bold mb-4"><span class="mr-2">📝</span>記錄收入/支出</h2>

                    

                    <div class="mb-4">

                        <div class="flex space-x-4">

                            <button id="incomeBtn" class="flex-1 py-2 px-4 rounded-md font-medium bg-gray-200 text-gray-700">

                                <span class="mr-2">💹</span>收入

                            </button>

                            <button id="expenseBtn" class="flex-1 py-2 px-4 rounded-md font-medium bg-red-500 text-white">

                                <span class="mr-2">💸</span>支出

                            </button>

                        </div>

                    </div>



                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">

                        <div>

                            <label class="block text-gray-700 mb-2">選擇戶口</label>

                            <select id="transactionAccount" class="w-full p-2 border border-gray-300 rounded-md text-base">

                                <option value="" disabled selected>選擇戶口</option>

                                <!-- Account options will be inserted here -->

                            </select>

                        </div>

                        

                        <div>

                            <label class="block text-gray-700 mb-2">選擇類別</label>

                            <div class="flex gap-2">

                                <select id="transactionCategory" class="flex-1 p-2 border border-gray-300 rounded-md text-base">

                                    <option value="" disabled selected>選擇類別</option>

                                    <!-- Category options will be inserted here -->

                                </select>

                                <button id="addCategoryBtn" class="bg-gray-200 hover:bg-gray-300 text-gray-700 p-2 rounded-md">

                                    <i class="fas fa-plus"></i>

                                </button>

                            </div>

                        </div>

                        

                        <div>

                            <label class="block text-gray-700 mb-2">金額</label>

                            <input type="number" id="transactionAmount" placeholder="輸入金額" class="w-full p-2 border border-gray-300 rounded-md text-base">

                        </div>

                        

                        <div>

                            <label class="block text-gray-700 mb-2">日期</label>

                            <input type="date" id="transactionDate" class="w-full p-2 border border-gray-300 rounded-md text-base">

                        </div>

                        

                        <div class="md:col-span-2">

                            <label class="block text-gray-700 mb-2">備註 (可選)</label>

                            <textarea id="transactionNote" placeholder="輸入備註" class="w-full p-2 border border-gray-300 rounded-md text-base" rows="2"></textarea>

                        </div>

                        

                        <!-- Quick Add Buttons -->

                        <div class="md:col-span-2">

                            <label class="block text-gray-700 mb-2">快速加入</label>

                            <div id="quickAmounts" class="flex flex-wrap gap-2">

                                <!-- Quick amount buttons will be inserted here -->

                            </div>

                        </div>

                    </div>

                    

                    <div class="mt-6 flex justify-end">

                        <button id="saveTransactionBtn" class="bg-primary text-white px-6 py-2 rounded-md hover:bg-primary-dark transition">

                            <span class="mr-2">✅</span>保存

                        </button>

                    </div>

                </div>

            </div>



            <!-- Budget Setting -->

            <div id="budget" class="tab-content slide-enter">

                <div class="bg-white p-6 rounded-lg shadow">

                    <h2 class="text-xl font-bold mb-4"><span class="mr-2">⚙️</span>預算設定</h2>

                    

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

                        <div>

                            <label class="block text-gray-700 mb-2">預算金額</label>

                            <input type="number" id="budgetAmountInput" placeholder="輸入預算金額" class="w-full p-2 border border-gray-300 rounded-md text-base">

                        </div>

                        

                        <div>

                            <label class="block text-gray-700 mb-2">重設週期</label>

                            <select id="budgetCycle" class="w-full p-2 border border-gray-300 rounded-md text-base">

                                <option value="daily">每日</option>

                                <option value="weekly">每週</option>

                                <option value="monthly" selected>每月</option>

                            </select>

                        </div>

                        

                        <div>

                            <label class="block text-gray-700 mb-2">通知閾值 (%)</label>

                            <input type="number" id="budgetAlertThreshold" min="1" max="100" placeholder="例如: 80" value="80" class="w-full p-2 border border-gray-300 rounded-md text-base">

                            <p class="text-sm text-gray-500 mt-1">當預算使用超過此百分比時發出通知</p>

                        </div>

                        

                        <div>

                            <label class="block text-gray-700 mb-2">重設日</label>

                            <select id="budgetResetDay" class="w-full p-2 border border-gray-300 rounded-md text-base">

                                <!-- Reset day options will be inserted here -->

                            </select>

                        </div>

                    </div>

                    

                    <div class="mt-6 flex justify-end">

                        <button id="saveBudgetBtn" class="bg-primary text-white px-6 py-2 rounded-md hover:bg-primary-dark transition">

                            <span class="mr-2">✅</span>保存設定

                        </button>

                    </div>

                </div>

            </div>



            <!-- Statistics -->

            <div id="stats" class="tab-content slide-enter">

                <div class="mb-6">

                    <h2 class="text-xl font-bold mb-4"><span class="mr-2">🔍</span>搜尋交易</h2>

                    <div class="bg-white p-4 rounded-lg shadow">

                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">

                            <div>

                                <label class="block text-gray-700 mb-2">日期範圍</label>

                                <div class="grid grid-cols-2 gap-2">

                                    <input type="date" id="searchStartDate" class="w-full p-2 border border-gray-300 rounded-md text-base">

                                    <input type="date" id="searchEndDate" class="w-full p-2 border border-gray-300 rounded-md text-base">

                                </div>

                            </div>

                            

                            <div>

                                <label class="block text-gray-700 mb-2">類型</label>

                                <select id="searchType" class="w-full p-2 border border-gray-300 rounded-md text-base">

                                    <option value="">全部</option>

                                    <option value="income">收入</option>

                                    <option value="expense">支出</option>

                                </select>

                            </div>

                            

                            <div>

                                <label class="block text-gray-700 mb-2">類別</label>

                                <select id="searchCategory" class="w-full p-2 border border-gray-300 rounded-md text-base">

                                    <option value="">全部類別</option>

                                    <!-- All categories will be inserted here -->

                                </select>

                            </div>

                        </div>

                        

                        <div class="mt-4 flex justify-end">

                            <button id="searchBtn" class="bg-primary text-white px-4 py-2 rounded-md hover:bg-primary-dark transition">

                                <span class="mr-2">🔍</span>搜尋

                            </button>

                        </div>

                    </div>

                </div>

                

                <div>

                    <h2 class="text-xl font-bold mb-4"><span class="mr-2">📋</span>交易記錄</h2>

                    <div id="noSearchResults" class="bg-white p-4 rounded-lg shadow text-center text-gray-500">

                        無符合條件的交易記錄

                    </div>

                    <div id="searchResults" class="bg-white rounded-lg shadow overflow-hidden" style="display: none;">

                        <table class="min-w-full divide-y divide-gray-200">

                            <thead class="bg-gray-50">

                                <tr>

                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">日期</th>

                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">類型</th>

                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">戶口</th>

                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">類別</th>

                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">金額</th>

                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">備註</th>

                                    <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">操作</th>

                                </tr>

                            </thead>

                            <tbody id="searchResultsList" class="bg-white divide-y divide-gray-200">

                                <!-- Search results will be inserted here -->

                            </tbody>

                        </table>

                    </div>

                </div>

            </div>

        </main>



        <!-- Modals -->

        <!-- New Account Modal -->

        <div id="newAccountModal" class="modal">

            <div class="modal-content">

                <span class="close">&times;</span>

                <h3 class="text-xl font-bold mb-4">新增戶口</h3>

                <div class="mb-4">

                    <label class="block text-gray-700 mb-2">戶口名稱</label>

                    <input type="text" id="newAccountName" placeholder="輸入戶口名稱" class="w-full p-2 border border-gray-300 rounded-md text-base">

                </div>

                <div class="mb-4">

                    <label class="block text-gray-700 mb-2">初始餘額</label>

                    <input type="number" id="newAccountBalance" placeholder="輸入初始餘額" class="w-full p-2 border border-gray-300 rounded-md text-base">

                </div>

                <div class="mb-6">

                    <label class="block text-gray-700 mb-2">選擇圖標</label>

                    <div id="accountIcons" class="grid grid-cols-5 gap-2">

                        <!-- Account icons will be inserted here -->

                    </div>

                </div>

                <div class="flex justify-end">

                    <button id="addAccountBtn" class="bg-primary text-white px-4 py-2 rounded-md hover:bg-primary-dark transition">

                        新增戶口

                    </button>

                </div>

            </div>

        </div>



        <!-- New Category Modal -->

        <div id="newCategoryModal" class="modal">

            <div class="modal-content">

                <span class="close">&times;</span>

                <h3 class="text-xl font-bold mb-4">新增類別</h3>

                <div class="mb-4">

                    <label class="block text-gray-700 mb-2">類別名稱</label>

                    <input type="text" id="newCategoryName" placeholder="輸入類別名稱" class="w-full p-2 border border-gray-300 rounded-md text-base">

                </div>

                <div class="mb-4">

                    <label class="block text-gray-700 mb-2">類型</label>

                    <div class="flex space-x-4">

                        <button id="newCategoryIncomeBtn" class="flex-1 py-2 px-4 rounded-md font-medium bg-gray-200 text-gray-700">

                            <span class="mr-2">💹</span>收入

                        </button>

                        <button id="newCategoryExpenseBtn" class="flex-1 py-2 px-4 rounded-md font-medium bg-red-500 text-white">

                            <span class="mr-2">💸</span>支出

                        </button>

                    </div>

                </div>

                <div class="flex justify-end">

                    <button id="addCategoryConfirmBtn" class="bg-primary text-white px-4 py-2 rounded-md hover:bg-primary-dark transition">

                        新增類別

                    </button>

                </div>

            </div>

        </div>



        <!-- Import/Export Modal -->

        <div id="importExportModal" class="modal">

            <div class="modal-content">

                <span class="close">&times;</span>

                <h3 class="text-xl font-bold mb-4">數據匯入/匯出</h3>

                

                <div class="mb-4">

                    <h4 class="font-medium mb-2">匯出數據</h4>

                    <p class="text-sm text-gray-600 mb-2">複製下方文本以備份您的數據：</p>

                    <textarea id="exportDataArea" class="border border-gray-300 bg-gray-50" readonly></textarea>

                    <button id="copyExportBtn" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition mt-2 w-full">

                        複製到剪貼板

                    </button>

                </div>

                

                <div class="mt-6">

                    <h4 class="font-medium mb-2">匯入數據</h4>

                    <p class="text-sm text-gray-600 mb-2">貼上之前匯出的數據：</p>

                    <textarea id="importDataArea" class="border border-gray-300"></textarea>

                    <button id="importDataBtn" class="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition w-full">

                        匯入數據

                    </button>

                </div>

            </div>

        </div>



        <!-- Notification -->

        <div id="notification" class="notification">

            <div class="p-4">

                <div class="text-center">

                    <div id="notificationIcon" class="text-4xl mb-4"></div>

                    <h3 id="notificationTitle" class="text-lg font-bold mb-2"></h3>

                    <p id="notificationMessage" class="text-gray-600 mb-4"></p>

                </div>

            </div>

        </div>

    </div>



    <script>

        // Global variables to store data

        let accounts = [];

        let categories = {

            income: [],

            expense: []

        };

        let transactions = [];

        let budget = {

            amount: 0,

            cycle: 'monthly',

            resetDay: 1,

            alertThreshold: 80,

            lastReset: null

        };

        let newDayStatus = {

            active: false,

            lastActivated: null

        };

        

        // Selected values

        let selectedIcon = '💳';

        let selectedCategoryType = 'expense';

        let transactionType = 'expense';

        

        // Check if localStorage is available

        let hasLocalStorage = false;

        try {

            if (typeof localStorage !== 'undefined') {

                localStorage.setItem('test', 'test');

                localStorage.removeItem('test');

                hasLocalStorage = true;

            }

        } catch (e) {

            hasLocalStorage = false;

            console.log('localStorage not available:', e);

        }

        

        // DOM Elements

        const tabButtons = document.querySelectorAll('.tab-btn');

        const tabContents = document.querySelectorAll('.tab-content');

        const newAccountModal = document.getElementById('newAccountModal');

        const newCategoryModal = document.getElementById('newCategoryModal');

        const importExportModal = document.getElementById('importExportModal');

        const notification = document.getElementById('notification');

        

        // Initialize the app when DOM is loaded

        document.addEventListener('DOMContentLoaded', function() {

            // Initialize the app

            initApp();

            

            // Setup event listeners

            setupEventListeners();

            

            // Check for dark mode

            checkDarkMode();

        });

        

        // Initialize the app

        function initApp() {

            // Load data from localStorage if available

            loadData();

            

            // Set default transaction date

            document.getElementById('transactionDate').value = getTodayFormatted();

            

            // Set default search dates (1 month range)

            const today = new Date();

            const monthAgo = new Date();

            monthAgo.setMonth(today.getMonth() - 1);

            

            document.getElementById('searchStartDate').value = formatDateForInput(monthAgo);

            document.getElementById('searchEndDate').value = formatDateForInput(today);

            

            // Initialize UI elements

            updateUI();

            

            // Setup budget reset day options

            updateBudgetResetDayOptions();

            

            // Initialize quick amount buttons

            initQuickAmountButtons();

            

            // Initialize account icons

            initAccountIcons();

            

            // Search transactions with default values

            searchTransactions();

            

            // Check for budget reset

            checkBudgetReset();

            

            // Check new day status

            checkNewDayStatus();

        }

        

        // Load data from localStorage or initialize defaults

        function loadData() {

            if (hasLocalStorage) {

                try {

                    const storedAccounts = localStorage.getItem('finance_accounts');

                    accounts = storedAccounts ? JSON.parse(storedAccounts) : [];

                    

                    const storedCategories = localStorage.getItem('finance_categories');

                    categories = storedCategories ? JSON.parse(storedCategories) : { income: [], expense: [] };

                    

                    const storedTransactions = localStorage.getItem('finance_transactions');

                    transactions = storedTransactions ? JSON.parse(storedTransactions) : [];

                    

                    const storedBudget = localStorage.getItem('finance_budget');

                    budget = storedBudget ? JSON.parse(storedBudget) : budget;

                    

                    const storedNewDayStatus = localStorage.getItem('finance_new_day_status');

                    newDayStatus = storedNewDayStatus ? JSON.parse(storedNewDayStatus) : newDayStatus;

                } catch (error) {

                    console.error('Error loading data:', error);

                    initDefaultData();

                }

            } else {

                initDefaultData();

            }

            

            // If no accounts exist, add a default one

            if (accounts.length === 0) {

                accounts.push({

                    id: generateId(),

                    name: '現金',

                    balance: 0,

                    icon: '💵'

                });

                saveData('accounts');

            }

            

            // Initialize default categories if empty

            initDefaultCategories();

        }

        

        // Save data to localStorage

        function saveData(dataType) {

            if (!hasLocalStorage) return;

            

            try {

                switch (dataType) {

                    case 'accounts':

                        localStorage.setItem('finance_accounts', JSON.stringify(accounts));

                        break;

                    case 'categories':

                        localStorage.setItem('finance_categories', JSON.stringify(categories));

                        break;

                    case 'transactions':

                        localStorage.setItem('finance_transactions', JSON.stringify(transactions));

                        break;

                    case 'budget':

                        localStorage.setItem('finance_budget', JSON.stringify(budget));

                        break;

                    case 'newDayStatus':

                        localStorage.setItem('finance_new_day_status', JSON.stringify(newDayStatus));

                        break;

                    default:

                        // Save all

                        localStorage.setItem('finance_accounts', JSON.stringify(accounts));

                        localStorage.setItem('finance_categories', JSON.stringify(categories));

                        localStorage.setItem('finance_transactions', JSON.stringify(transactions));

                        localStorage.setItem('finance_budget', JSON.stringify(budget));

                        localStorage.setItem('finance_new_day_status', JSON.stringify(newDayStatus));

                }

            } catch (error) {

                console.error('Error saving data:', error);

            }

        }

        

        // Initialize default data

        function initDefaultData() {

            // Reset to defaults

            accounts = [{

                id: generateId(),

                name: '現金',

                balance: 0,

                icon: '💵'

            }];

            

            categories = {

                income: ['薪資', '獎金', '投資收益', '禮金', '其他收入'],

                expense: ['食品', '交通', '住房', '娛樂', '服裝', '醫療', '教育', '其他支出']

            };

            

            transactions = [];

            

            budget = {

                amount: 0,

                cycle: 'monthly',

                resetDay: 1,

                alertThreshold: 80,

                lastReset: null

            };

            

            newDayStatus = {

                active: false,

                lastActivated: null

            };

        }

        

        // Initialize default categories

        function initDefaultCategories() {

            if (!categories.income || categories.income.length === 0) {

                categories.income = ['薪資', '獎金', '投資收益', '禮金', '其他收入'];

            }

            

            if (!categories.expense || categories.expense.length === 0) {

                categories.expense = ['食品', '交通', '住房', '娛樂', '服裝', '醫療', '教育', '其他支出'];

            }

            

            saveData('categories');

        }

        

        // Export data to JSON string

        function exportData() {

            const exportData = {

                accounts: accounts,

                categories: categories,

                transactions: transactions,

                budget: budget,

                newDayStatus: newDayStatus,

                exportDate: new Date().toISOString()

            };

            

            return JSON.stringify(exportData, null, 2);

        }

        

        // Import data from JSON string

        function importData(jsonString) {

            try {

                const importedData = JSON.parse(jsonString);

                

                // Validate required data structures

                if (!importedData.accounts || !Array.isArray(importedData.accounts) ||

                    !importedData.categories || !importedData.categories.income || !importedData.categories.expense ||

                    !importedData.transactions || !Array.isArray(importedData.transactions)) {

                    throw new Error('匯入的數據格式不正確');

                }

                

                // Import data

                accounts = importedData.accounts;

                categories = importedData.categories;

                transactions = importedData.transactions;

                budget = importedData.budget || budget;

                newDayStatus = importedData.newDayStatus || newDayStatus;

                

                // Save to localStorage

                saveData();

                

                // Update UI

                updateUI();

                searchTransactions();

                

                return true;

            } catch (error) {

                console.error('Import error:', error);

                notify('❌', '匯入失敗', '匯入的數據格式不正確');

                return false;

            }

        }

        

        // Check if budget needs to be reset

        function checkBudgetReset() {

            if (!budget.lastReset || !budget.amount) return;

            

            const now = new Date();

            const lastReset = new Date(budget.lastReset);

            let shouldReset = false;

            

            switch (budget.cycle) {

                case 'daily':

                    // Reset if it's a new day

                    shouldReset = now.getDate() !== lastReset.getDate() || 

                                now.getMonth() !== lastReset.getMonth() || 

                                now.getFullYear() !== lastReset.getFullYear();

                    break;

                case 'weekly':

                    // Reset if it's the reset day of the week and a week has passed

                    const dayIndex = ['週日', '週一', '週二', '週三', '週四', '週五', '週六'].indexOf(budget.resetDay);

                    if (dayIndex === now.getDay()) {

                        const dayDiff = (now - lastReset) / (1000 * 60 * 60 * 24);

                        shouldReset = dayDiff >= 7;

                    }

                    break;

                case 'monthly':

                    // Reset if it's the reset day of the month

                    shouldReset = now.getDate() === parseInt(budget.resetDay) && 

                                (now.getMonth() !== lastReset.getMonth() || now.getFullYear() !== lastReset.getFullYear());

                    break;

            }

            

            if (shouldReset) {

                budget.lastReset = now.toISOString();

                saveData('budget');

                notify('🔄', '預算已重設', '您的預算已根據設定的週期重設。');

            }

        }

        

        // Check new day status

        function checkNewDayStatus() {

            if (!newDayStatus.lastActivated) return;

            

            const now = new Date();

            const lastActivated = new Date(newDayStatus.lastActivated);

            

            // If it's a new calendar day, reset the new day status

            if (now.getDate() !== lastActivated.getDate() || 

                now.getMonth() !== lastActivated.getMonth() || 

                now.getFullYear() !== lastActivated.getFullYear()) {

                newDayStatus.active = false;

                saveData('newDayStatus');

            }

        }

        

        // Start a new day

        function startNewDay() {

            newDayStatus.active = true;

            newDayStatus.lastActivated = new Date().toISOString();

            saveData('newDayStatus');

            notify('🌅', '新的一天已開始', '從現在開始，所有交易將記錄為今天的日期。');

        }

        

        // Update the UI with current data

        function updateUI() {

            // Update dashboard

            updateDashboard();

            

            // Update accounts tab

            updateAccountsTab();

            

            // Update transaction categories

            updateTransactionCategories();

            

            // Update statistics categories

            updateStatisticsCategories();

            

            // Update account dropdowns

            updateAccountDropdowns();

            

            // Update budget status

            updateBudgetStatus();

        }

        

        // Update dashboard with current data

        function updateDashboard() {

            // Update total balance

            document.getElementById('totalBalance').textContent = formatNumber(getTotalBalance());

            

            // Update today income/expense

            document.getElementById('todayIncome').textContent = formatNumber(getTodayIncome());

            document.getElementById('todayExpense').textContent = formatNumber(getTodayExpense());

            

            // Update today transactions

            updateTodayTransactions();

            

            // Update recent transactions

            updateRecentTransactions();

        }

        

        // Update today's transactions on dashboard

        function updateTodayTransactions() {

            const todayTransactions = getTodayTransactions();

            const todayTransactionsEmpty = document.getElementById('todayTransactionsEmpty');

            const todayTransactionsTable = document.getElementById('todayTransactionsTable');

            const todayTransactionsList = document.getElementById('todayTransactionsList');

            

            if (todayTransactions.length === 0) {

                todayTransactionsEmpty.style.display = 'block';

                todayTransactionsTable.style.display = 'none';

                return;

            }

            

            todayTransactionsEmpty.style.display = 'none';

            todayTransactionsTable.style.display = 'block';

            

            // Clear previous content

            todayTransactionsList.innerHTML = '';

            

            // Add each transaction

            todayTransactions.forEach(transaction => {

                const row = document.createElement('tr');

                

                // Type

                const typeCell = document.createElement('td');

                typeCell.className = 'px-6 py-4 whitespace-nowrap';

                typeCell.textContent = transaction.type === 'income' ? '📈 收入' : '📉 支出';

                row.appendChild(typeCell);

                

                // Account

                const accountCell = document.createElement('td');

                accountCell.className = 'px-6 py-4 whitespace-nowrap';

                accountCell.textContent = getAccountName(transaction.account);

                row.appendChild(accountCell);

                

                // Category

                const categoryCell = document.createElement('td');

                categoryCell.className = 'px-6 py-4 whitespace-nowrap';

                categoryCell.textContent = transaction.category;

                row.appendChild(categoryCell);

                

                // Amount

                const amountCell = document.createElement('td');

                amountCell.className = 'px-6 py-4 whitespace-nowrap';

                if (transaction.type === 'income') {

                    amountCell.classList.add('text-green-600');

                    amountCell.classList.add('font-medium');

                } else {

                    amountCell.classList.add('text-red-600');

                    amountCell.classList.add('font-medium');

                }

                amountCell.textContent = '$' + formatNumber(transaction.amount);

                row.appendChild(amountCell);

                

                // Note

                const noteCell = document.createElement('td');

                noteCell.className = 'px-6 py-4 whitespace-nowrap text-gray-500';

                noteCell.textContent = transaction.note || '-';

                row.appendChild(noteCell);

                

                todayTransactionsList.appendChild(row);

            });

        }

        

        // Update recent transactions on dashboard

        function updateRecentTransactions() {

            const recentTransactions = getRecentTransactions(5);

            const noTransactions = document.getElementById('noTransactions');

            const recentTransactionsEl = document.getElementById('recentTransactions');

            const recentTransactionsList = document.getElementById('recentTransactionsList');

            

            if (recentTransactions.length === 0) {

                noTransactions.style.display = 'block';

                recentTransactionsEl.style.display = 'none';

                return;

            }

            

            noTransactions.style.display = 'none';

            recentTransactionsEl.style.display = 'block';

            

            // Clear previous content

            recentTransactionsList.innerHTML = '';

            

            // Add each transaction

            recentTransactions.forEach(transaction => {

                const li = document.createElement('li');

                li.className = 'px-4 py-3 hover:bg-gray-50 flex justify-between items-center';

                

                const leftDiv = document.createElement('div');

                

                const emojiSpan = document.createElement('span');

                emojiSpan.className = 'mr-2';

                emojiSpan.textContent = transaction.type === 'income' ? '💹' : '💸';

                leftDiv.appendChild(emojiSpan);

                

                const categorySpan = document.createElement('span');

                categorySpan.textContent = transaction.category;

                leftDiv.appendChild(categorySpan);

                

                const dateDiv = document.createElement('div');

                dateDiv.className = 'text-sm text-gray-500';

                dateDiv.textContent = formatDate(transaction.date);

                leftDiv.appendChild(dateDiv);

                

                const amountDiv = document.createElement('div');

                if (transaction.type === 'income') {

                    amountDiv.classList.add('text-green-600');

                    amountDiv.classList.add('font-medium');

                } else {

                    amountDiv.classList.add('text-red-600');

                    amountDiv.classList.add('font-medium');

                }

                amountDiv.textContent = '$' + formatNumber(transaction.amount);

                

                li.appendChild(leftDiv);

                li.appendChild(amountDiv);

                

                recentTransactionsList.appendChild(li);

            });

        }

        

        // Update accounts tab

        function updateAccountsTab() {

            const accountsGrid = document.getElementById('accountsGrid');

            

            // Clear previous content

            accountsGrid.innerHTML = '';

            

            // Add each account

            accounts.forEach(account => {

                const accountCard = document.createElement('div');

                accountCard.className = 'bg-white p-6 rounded-lg shadow relative';

                

                const actionsDiv = document.createElement('div');

                actionsDiv.className = 'absolute top-2 right-2 flex space-x-1';

                

                const deleteBtn = document.createElement('button');

                deleteBtn.className = 'text-red-500 hover:text-red-700';

                deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';

                deleteBtn.addEventListener('click', () => deleteAccount(account.id));

                actionsDiv.appendChild(deleteBtn);

                

                const iconDiv = document.createElement('div');

                iconDiv.className = 'text-3xl mb-2 emoji-btn';

                iconDiv.textContent = account.icon || '💳';

                

                const nameHeading = document.createElement('h3');

                nameHeading.className = 'text-lg font-bold mb-1';

                nameHeading.textContent = account.name;

                

                const balanceDiv = document.createElement('div');

                balanceDiv.className = 'text-2xl font-bold';

                balanceDiv.textContent = '$' + formatNumber(account.balance);

                

                accountCard.appendChild(actionsDiv);

                accountCard.appendChild(iconDiv);

                accountCard.appendChild(nameHeading);

                accountCard.appendChild(balanceDiv);

                

                accountsGrid.appendChild(accountCard);

            });

            

            // Add the "Add New Account" card

            const addNewCard = document.createElement('div');

            addNewCard.className = 'bg-gray-100 p-6 rounded-lg shadow border-2 border-dashed border-gray-300 flex flex-col items-center justify-center cursor-pointer hover:bg-gray-200 transition';

            addNewCard.innerHTML = `

                <div class="text-3xl mb-2">➕</div>

                <h3 class="text-lg font-medium text-gray-600">新增戶口</h3>

            `;

            addNewCard.addEventListener('click', () => {

                document.getElementById('newAccountName').value = '';

                document.getElementById('newAccountBalance').value = '';

                selectedIcon = '💳';

                updateSelectedAccountIcon();

                openModal('newAccountModal');

            });

            

            accountsGrid.appendChild(addNewCard);

        }

        

        // Update account dropdowns in various forms

        function updateAccountDropdowns() {

            const transferFrom = document.getElementById('transferFrom');

            const transferTo = document.getElementById('transferTo');

            const transactionAccount = document.getElementById('transactionAccount');

            

            // Clear previous options

            transferFrom.innerHTML = '<option value="" disabled selected>選擇戶口</option>';

            transferTo.innerHTML = '<option value="" disabled selected>選擇戶口</option>';

            transactionAccount.innerHTML = '<option value="" disabled selected>選擇戶口</option>';

            

            // Add account options

            accounts.forEach(account => {

                const option1 = document.createElement('option');

                option1.value = account.id;

                option1.textContent = account.name;

                

                const option2 = document.createElement('option');

                option2.value = account.id;

                option2.textContent = account.name;

                

                const option3 = document.createElement('option');

                option3.value = account.id;

                option3.textContent = account.name;

                

                transferFrom.appendChild(option1);

                transferTo.appendChild(option2);

                transactionAccount.appendChild(option3);

            });

        }

        

        // Update transaction categories dropdown based on selected type

        function updateTransactionCategories() {

            const transactionCategory = document.getElementById('transactionCategory');

            

            // Clear previous options

            transactionCategory.innerHTML = '<option value="" disabled selected>選擇類別</option>';

            

            // Add category options based on current transaction type

            const categoriesList = categories[transactionType] || [];

            categoriesList.forEach(category => {

                const option = document.createElement('option');

                option.value = category;

                option.textContent = category;

                transactionCategory.appendChild(option);

            });

        }

        

        // Update statistics categories dropdown

        function updateStatisticsCategories() {

            const searchCategory = document.getElementById('searchCategory');

            

            // Clear previous options

            searchCategory.innerHTML = '<option value="">全部類別</option>';

            

            // Add all categories

            const allCategories = [...categories.income, ...categories.expense];

            const uniqueCategories = [...new Set(allCategories)]; // Remove duplicates

            

            uniqueCategories.forEach(category => {

                const option = document.createElement('option');

                option.value = category;

                option.textContent = category;

                searchCategory.appendChild(option);

            });

        }

        

        // Update budget status on dashboard

        function updateBudgetStatus() {

            const noBudget = document.getElementById('noBudget');

            const budgetStatus = document.getElementById('budgetStatus');

            

            if (!budget.amount) {

                noBudget.style.display = 'block';

                budgetStatus.style.display = 'none';

                return;

            }

            

            noBudget.style.display = 'none';

            budgetStatus.style.display = 'block';

            

            // Update budget info

            document.getElementById('budgetCycleText').textContent = getBudgetCycleText();

            document.getElementById('budgetAmount').textContent = formatNumber(budget.amount);

            document.getElementById('budgetUsed').textContent = formatNumber(getBudgetUsed());

            

            const remaining = getBudgetRemaining();

            const remainingEl = document.getElementById('budgetRemaining');

            remainingEl.textContent = '$' + formatNumber(remaining);

            

            if (remaining < 0) {

                remainingEl.classList.add('text-red-600');

            } else {

                remainingEl.classList.add('text-green-600');

            }

            

            // Update budget bar

            const percentage = getBudgetPercentage();

            const budgetBar = document.getElementById('budgetBar');

            budgetBar.style.width = Math.min(percentage, 100) + '%';

            

            if (percentage > 100) {

                budgetBar.classList.add('bg-red-600');

                budgetBar.classList.remove('bg-primary');

            } else {

                budgetBar.classList.add('bg-primary');

                budgetBar.classList.remove('bg-red-600');

            }

            

            document.getElementById('budgetPercentage').textContent = percentage + '% 已使用';

            

            // Update budget form

            document.getElementById('budgetAmountInput').value = budget.amount;

            document.getElementById('budgetCycle').value = budget.cycle;

            document.getElementById('budgetAlertThreshold').value = budget.alertThreshold;

            if (budget.resetDay) {

                document.getElementById('budgetResetDay').value = budget.resetDay;

            }

        }

        

        // Update budget reset day options based on selected cycle

        function updateBudgetResetDayOptions() {

            const budgetCycle = document.getElementById('budgetCycle').value;

            const budgetResetDay = document.getElementById('budgetResetDay');

            

            // Clear previous options

            budgetResetDay.innerHTML = '';

            

            // Add options based on cycle

            if (budgetCycle === 'daily') {

                budgetResetDay.disabled = true;

                const option = document.createElement('option');

                option.value = '1';

                option.textContent = '每日自動重設';

                budgetResetDay.appendChild(option);

            } else if (budgetCycle === 'weekly') {

                budgetResetDay.disabled = false;

                const days = ['週一', '週二', '週三', '週四', '週五', '週六', '週日'];

                days.forEach(day => {

                    const option = document.createElement('option');

                    option.value = day;

                    option.textContent = day;

                    budgetResetDay.appendChild(option);

                });

            } else if (budgetCycle === 'monthly') {

                budgetResetDay.disabled = false;

                for (let i = 1; i <= 31; i++) {

                    const option = document.createElement('option');

                    option.value = i;

                    option.textContent = i + '日';

                    budgetResetDay.appendChild(option);

                }

            }

            

            // Set default value

            if (budget.resetDay) {

                // Try to find the value in the options

                const options = Array.from(budgetResetDay.options);

                const matchingOption = options.find(option => option.value == budget.resetDay);

                

                if (matchingOption) {

                    budgetResetDay.value = budget.resetDay;

                } else {

                    // If not found (e.g. when switching from monthly to weekly), set the first option

                    budgetResetDay.selectedIndex = 0;

                    budget.resetDay = budgetResetDay.value;

                }

            } else {

                // Set default reset day if not specified

                budgetResetDay.selectedIndex = 0;

                budget.resetDay = budgetResetDay.value;

            }

        }

        

        // Initialize quick amount buttons

        function initQuickAmountButtons() {

            const quickAmounts = document.getElementById('quickAmounts');

            

            // Clear previous buttons

            quickAmounts.innerHTML = '';

            

            // Add quick amount buttons

            [10, 20, 50, 100, 200, 500, 1000].forEach(amount => {

                const button = document.createElement('button');

                button.className = 'bg-gray-200 hover:bg-gray-300 px-3 py-1 rounded-md text-gray-700';

                button.textContent = '$' + amount;

                button.addEventListener('click', () => {

                    document.getElementById('transactionAmount').value = amount;

                });

                

                quickAmounts.appendChild(button);

            });

        }

        

        // Initialize account icons

        function initAccountIcons() {

            const accountIcons = document.getElementById('accountIcons');

            

            // Clear previous icons

            accountIcons.innerHTML = '';

            

            // Add account icons

            ['💳', '💰', '🏦', '💴', '💵', '💶', '💷', '🪙', '💸', '💹'].forEach(icon => {

                const button = document.createElement('button');

                button.className = 'p-2 rounded-md text-xl emoji-btn';

                if (selectedIcon === icon) {

                    button.classList.add('bg-primary');

                    button.classList.add('text-white');

                } else {

                    button.classList.add('bg-gray-100');

                }

                button.textContent = icon;

                button.addEventListener('click', () => {

                    selectedIcon = icon;

                    updateSelectedAccountIcon();

                });

                

                accountIcons.appendChild(button);

            });

        }

        

        // Update selected account icon

        function updateSelectedAccountIcon() {

            const buttons = document.querySelectorAll('#accountIcons button');

            buttons.forEach(button => {

                if (button.textContent === selectedIcon) {

                    button.classList.remove('bg-gray-100');

                    button.classList.add('bg-primary', 'text-white');

                } else {

                    button.classList.remove('bg-primary', 'text-white');

                    button.classList.add('bg-gray-100');

                }

            });

        }

        

        // Setup event listeners

        function setupEventListeners() {

            // Tab switching

            tabButtons.forEach(button => {

                button.addEventListener('click', () => {

                    const tabId = button.getAttribute('data-tab');

                    switchTab(tabId);

                });

            });

            

            // Close modal buttons

            document.querySelectorAll('.close').forEach(closeBtn => {

                closeBtn.addEventListener('click', event => {

                    const modal = event.target.closest('.modal');

                    closeModal(modal.id);

                });

            });

            

            // New day button

            document.getElementById('newDayBtn').addEventListener('click', startNewDay);

            

            // Import/Export button

            document.getElementById('importExportBtn').addEventListener('click', () => {

                document.getElementById('exportDataArea').value = exportData();

                document.getElementById('importDataArea').value = '';

                openModal('importExportModal');

            });

            

            // Copy export data button

            document.getElementById('copyExportBtn').addEventListener('click', () => {

                const exportArea = document.getElementById('exportDataArea');

                exportArea.select();

                document.execCommand('copy');

                notify('✅', '已複製', '數據已成功複製到剪貼板');

            });

            

            // Import data button

            document.getElementById('importDataBtn').addEventListener('click', () => {

                const importArea = document.getElementById('importDataArea');

                const result = importData(importArea.value);

                if (result) {

                    closeModal('importExportModal');

                    notify('✅', '匯入成功', '數據已成功匯入');

                }

            });

            

            // Go to budget tab button

            document.getElementById('goBudgetBtn').addEventListener('click', () => switchTab('budget'));

            

            // View all transactions button

            document.getElementById('viewAllTransactionsBtn').addEventListener('click', () => switchTab('stats'));

            

            // Transaction type buttons

            document.getElementById('incomeBtn').addEventListener('click', () => {

                transactionType = 'income';

                updateTransactionTypeUI();

                updateTransactionCategories();

            });

            

            document.getElementById('expenseBtn').addEventListener('click', () => {

                transactionType = 'expense';

                updateTransactionTypeUI();

                updateTransactionCategories();

            });

            

            // New category type buttons

            document.getElementById('newCategoryIncomeBtn').addEventListener('click', () => {

                selectedCategoryType = 'income';

                updateNewCategoryTypeUI();

            });

            

            document.getElementById('newCategoryExpenseBtn').addEventListener('click', () => {

                selectedCategoryType = 'expense';

                updateNewCategoryTypeUI();

            });

            

            // Add account button

            document.getElementById('addAccountBtn').addEventListener('click', addAccount);

            

            // Add category button

            document.getElementById('addCategoryBtn').addEventListener('click', () => {

                document.getElementById('newCategoryName').value = '';

                updateNewCategoryTypeUI();

                openModal('newCategoryModal');

            });

            

            // Add category confirm button

            document.getElementById('addCategoryConfirmBtn').addEventListener('click', addCategory);

            

            // Transfer money button

            document.getElementById('transferBtn').addEventListener('click', transferMoney);

            

            // Save transaction button

            document.getElementById('saveTransactionBtn').addEventListener('click', addTransaction);

            

            // Save budget button

            document.getElementById('saveBudgetBtn').addEventListener('click', saveBudget);

            

            // Search button

            document.getElementById('searchBtn').addEventListener('click', searchTransactions);

            

            // Budget cycle change

            document.getElementById('budgetCycle').addEventListener('change', updateBudgetResetDayOptions);

            

            // Click outside modal to close

            window.addEventListener('click', event => {

                if (event.target.classList.contains('modal')) {

                    closeModal(event.target.id);

                }

            });

        }

        

        // Switch tabs

        function switchTab(tabId) {

            // Update tab buttons

            tabButtons.forEach(button => {

                const buttonTabId = button.getAttribute('data-tab');

                if (buttonTabId === tabId) {

                    button.classList.add('text-primary', 'border-primary');

                    button.classList.remove('text-gray-500', 'hover:text-gray-700', 'border-transparent');

                } else {

                    button.classList.remove('text-primary', 'border-primary');

                    button.classList.add('text-gray-500', 'hover:text-gray-700', 'border-transparent');

                }

            });

            

            // Update tab contents

            tabContents.forEach(content => {

                if (content.id === tabId) {

                    content.classList.add('active');

                } else {

                    content.classList.remove('active');

                }

            });

            

            // Specific actions for certain tabs

            if (tabId === 'transactions') {

                // Reset new transaction form when switching to transactions tab

                document.getElementById('transactionAccount').value = '';

                document.getElementById('transactionCategory').value = '';

                document.getElementById('transactionAmount').value = '';

                document.getElementById('transactionDate').value = getTodayFormatted();

                document.getElementById('transactionNote').value = '';

                

                // Keep transaction type

                updateTransactionTypeUI();

                updateTransactionCategories();

            }

        }

        

        // Open a modal

        function openModal(modalId) {

            const modal = document.getElementById(modalId);

            modal.style.display = 'block';

        }

        

        // Close a modal

        function closeModal(modalId) {

            const modal = document.getElementById(modalId);

            modal.style.display = 'none';

        }

        

        // Update transaction type UI

        function updateTransactionTypeUI() {

            const incomeBtn = document.getElementById('incomeBtn');

            const expenseBtn = document.getElementById('expenseBtn');

            

            if (transactionType === 'income') {

                incomeBtn.classList.remove('bg-gray-200', 'text-gray-700');

                incomeBtn.classList.add('bg-green-500', 'text-white');

                expenseBtn.classList.remove('bg-red-500', 'text-white');

                expenseBtn.classList.add('bg-gray-200', 'text-gray-700');

            } else {

                incomeBtn.classList.remove('bg-green-500', 'text-white');

                incomeBtn.classList.add('bg-gray-200', 'text-gray-700');

                expenseBtn.classList.remove('bg-gray-200', 'text-gray-700');

                expenseBtn.classList.add('bg-red-500', 'text-white');

            }

        }

        

        // Update new category type UI

        function updateNewCategoryTypeUI() {

            const incomeBtn = document.getElementById('newCategoryIncomeBtn');

            const expenseBtn = document.getElementById('newCategoryExpenseBtn');

            

            if (selectedCategoryType === 'income') {

                incomeBtn.classList.remove('bg-gray-200', 'text-gray-700');

                incomeBtn.classList.add('bg-green-500', 'text-white');

                expenseBtn.classList.remove('bg-red-500', 'text-white');

                expenseBtn.classList.add('bg-gray-200', 'text-gray-700');

            } else {

                incomeBtn.classList.remove('bg-green-500', 'text-white');

                incomeBtn.classList.add('bg-gray-200', 'text-gray-700');

                expenseBtn.classList.remove('bg-gray-200', 'text-gray-700');

                expenseBtn.classList.add('bg-red-500', 'text-white');

            }

        }

        

        // Add an account

        function addAccount() {

            const nameInput = document.getElementById('newAccountName');

            const balanceInput = document.getElementById('newAccountBalance');

            

            const name = nameInput.value.trim();

            const balance = parseFloat(balanceInput.value);

            

            if (!name || isNaN(balance)) {

                notify('❌', '新增戶口失敗', '請填寫完整的戶口資料。');

                return;

            }

            

            const newAccount = {

                id: generateId(),

                name: name,

                balance: balance,

                icon: selectedIcon

            };

            

            accounts.push(newAccount);

            saveData('accounts');

            

            closeModal('newAccountModal');

            updateAccountsTab();

            updateAccountDropdowns();

            updateDashboard();

            

            notify('✅', '戶口已新增', `「${name}」戶口已成功新增。`);

        }

        

        // Delete an account

        function deleteAccount(accountId) {

            const accountName = getAccountName(accountId);

            

            // Check if there are transactions using this account

            const hasTransactions = transactions.some(t => t.account === accountId);

            

            if (hasTransactions) {

                notify('❌', '無法刪除戶口', `「${accountName}」戶口有相關交易記錄，無法刪除。`);

                return;

            }

            

            accounts = accounts.filter(a => a.id !== accountId);

            saveData('accounts');

            

            updateAccountsTab();

            updateAccountDropdowns();

            updateDashboard();

            

            notify('🗑️', '戶口已刪除', `「${accountName}」戶口已成功刪除。`);

        }

        

        // Add a category

        function addCategory() {

            const nameInput = document.getElementById('newCategoryName');

            const name = nameInput.value.trim();

            

            if (!name) {

                notify('❌', '新增類別失敗', '請輸入類別名稱。');

                return;

            }

            

            // Check if category already exists

            if (categories[selectedCategoryType].includes(name)) {

                notify('❌', '類別已存在', `「${name}」類別已經存在。`);

                return;

            }

            

            categories[selectedCategoryType].push(name);

            saveData('categories');

            

            closeModal('newCategoryModal');

            updateTransactionCategories();

            updateStatisticsCategories();

            

            // If adding a category while in transaction form, select it

            if (transactionType === selectedCategoryType) {

                const categorySelect = document.getElementById('transactionCategory');

                const newOption = document.createElement('option');

                newOption.value = name;

                newOption.textContent = name;

                categorySelect.appendChild(newOption);

                categorySelect.value = name;

            }

            

            notify('✅', '類別已新增', '新類別已成功新增。');

        }

        

        // Transfer money between accounts

        function transferMoney() {

            const fromSelect = document.getElementById('transferFrom');

            const toSelect = document.getElementById('transferTo');

            const amountInput = document.getElementById('transferAmount');

            

            const fromId = fromSelect.value;

            const toId = toSelect.value;

            const amount = parseFloat(amountInput.value);

            

            if (!fromId || !toId || isNaN(amount) || amount <= 0 || fromId === toId) {

                notify('❌', '轉賬失敗', '請填寫有效的轉賬資料。');

                return;

            }

            

            // Find accounts

            const fromAccountIndex = accounts.findIndex(a => a.id === fromId);

            const toAccountIndex = accounts.findIndex(a => a.id === toId);

            

            if (fromAccountIndex === -1 || toAccountIndex === -1) {

                notify('❌', '轉賬失敗', '找不到指定的戶口。');

                return;

            }

            

            // Check if from account has enough balance

            if (accounts[fromAccountIndex].balance < amount) {

                notify('❌', '轉賬失敗', '餘額不足。');

                return;

            }

            

            // Update balances

            accounts[fromAccountIndex].balance -= amount;

            accounts[toAccountIndex].balance += amount;

            

            // Record transaction

            const now = new Date();

            const fromAccountName = accounts[fromAccountIndex].name;

            const toAccountName = accounts[toAccountIndex].name;

            

            transactions.push({

                id: generateId(),

                type: 'transfer',

                account: fromId,

                toAccount: toId,

                amount: amount,

                date: getTransactionDate(now),

                note: `從「${fromAccountName}」轉賬到「${toAccountName}」`,

                category: '戶口轉賬'

            });

            

            saveData('accounts');

            saveData('transactions');

            

            // Reset form

            fromSelect.value = '';

            toSelect.value = '';

            amountInput.value = '';

            

            updateAccountsTab();

            updateDashboard();

            searchTransactions();

            

            notify('✅', '轉賬成功', `已成功將 $${amount} 從「${fromAccountName}」轉賬到「${toAccountName}」。`);

        }

        

        // Add a transaction

        function addTransaction() {

            const accountSelect = document.getElementById('transactionAccount');

            const categorySelect = document.getElementById('transactionCategory');

            const amountInput = document.getElementById('transactionAmount');

            const dateInput = document.getElementById('transactionDate');

            const noteInput = document.getElementById('transactionNote');

            

            const accountId = accountSelect.value;

            const category = categorySelect.value;

            const amount = parseFloat(amountInput.value);

            const date = dateInput.value;

            const note = noteInput.value.trim();

            

            if (!accountId || !category || isNaN(amount) || amount <= 0 || !date) {

                notify('❌', '交易失敗', '請填寫完整的交易資料。');

                return;

            }

            

            const accountIndex = accounts.findIndex(a => a.id === accountId);

            

            if (accountIndex === -1) {

                notify('❌', '交易失敗', '找不到指定的戶口。');

                return;

            }

            

            // Update account balance

            if (transactionType === 'income') {

                accounts[accountIndex].balance += amount;

            } else {

                // Check if account has enough balance for expense

                if (accounts[accountIndex].balance < amount) {

                    notify('⚠️', '餘額不足', `「${accounts[accountIndex].name}」戶口餘額不足，但交易仍已記錄。`);

                }

                accounts[accountIndex].balance -= amount;

            }

            

            // Add transaction

            transactions.push({

                id: generateId(),

                type: transactionType,

                account: accountId,

                category: category,

                amount: amount,

                date: date,

                note: note,

                receipt: null

            });

            

            saveData('accounts');

            saveData('transactions');

            

            // Check if budget alert needed

            checkBudgetAlert();

            

            // Reset form

            categorySelect.value = '';

            amountInput.value = '';

            noteInput.value = '';

            

            updateAccountsTab();

            updateDashboard();

            searchTransactions();

            

            notify('✅', '交易已記錄', `${transactionType === 'income' ? '收入' : '支出'}交易已成功記錄。`);

        }

        

        // Save budget settings

        function saveBudget() {

            const amountInput = document.getElementById('budgetAmountInput');

            const cycleSelect = document.getElementById('budgetCycle');

            const resetDaySelect = document.getElementById('budgetResetDay');

            const alertThresholdInput = document.getElementById('budgetAlertThreshold');

            

            const amount = parseFloat(amountInput.value);

            const cycle = cycleSelect.value;

            const resetDay = resetDaySelect.value;

            const alertThreshold = parseInt(alertThresholdInput.value);

            

            if (isNaN(amount) || amount <= 0) {

                notify('❌', '預算設定失敗', '請輸入有效的預算金額。');

                return;

            }

            

            if (isNaN(alertThreshold) || alertThreshold < 1 || alertThreshold > 100) {

                notify('❌', '預算設定失敗', '請輸入有效的通知閾值 (1-100)。');

                return;

            }

            

            budget.amount = amount;

            budget.cycle = cycle;

            budget.resetDay = resetDay;

            budget.alertThreshold = alertThreshold;

            

            // Set last reset to today if not already set

            if (!budget.lastReset) {

                budget.lastReset = new Date().toISOString();

            }

            

            saveData('budget');

            updateBudgetStatus();

            

            notify('✅', '預算已設定', '您的預算設定已成功保存。');

        }

        

        // Search transactions

        function searchTransactions() {

            const startDateInput = document.getElementById('searchStartDate');

            const endDateInput = document.getElementById('searchEndDate');

            const typeSelect = document.getElementById('searchType');

            const categorySelect = document.getElementById('searchCategory');

            

            const startDate = startDateInput.value;

            const endDate = endDateInput.value;

            const type = typeSelect.value;

            const category = categorySelect.value;

            

            let filtered = [...transactions];

            

            // Filter by date range

            if (startDate) {

                filtered = filtered.filter(t => t.date >= startDate);

            }

            

            if (endDate) {

                // Include the entire end date

                const endDateObj = new Date(endDate);

                endDateObj.setHours(23, 59, 59, 999);

                const formattedEndDate = formatDateForInput(endDateObj);

                filtered = filtered.filter(t => t.date <= formattedEndDate);

            }

            

            // Filter by type

            if (type) {

                filtered = filtered.filter(t => t.type === type);

            }

            

            // Filter by category

            if (category) {

                filtered = filtered.filter(t => t.category === category);

            }

            

            // Sort by date (newest first)

            filtered.sort((a, b) => new Date(b.date) - new Date(a.date));

            

            // Update search results

            updateSearchResults(filtered);

        }

        

        // Update search results

        function updateSearchResults(results) {

            const noResults = document.getElementById('noSearchResults');

            const resultsTable = document.getElementById('searchResults');

            const resultsList = document.getElementById('searchResultsList');

            

            if (results.length === 0) {

                noResults.style.display = 'block';

                resultsTable.style.display = 'none';

                return;

            }

            

            noResults.style.display = 'none';

            resultsTable.style.display = 'block';

            

            // Clear previous results

            resultsList.innerHTML = '';

            

            // Add each result

            results.forEach(transaction => {

                const row = document.createElement('tr');

                

                // Date

                const dateCell = document.createElement('td');

                dateCell.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-500';

                dateCell.textContent = formatDate(transaction.date);

                row.appendChild(dateCell);

                

                // Type

                const typeCell = document.createElement('td');

                typeCell.className = 'px-6 py-4 whitespace-nowrap';

                typeCell.textContent = transaction.type === 'income' ? '📈 收入' : (transaction.type === 'expense' ? '📉 支出' : '🔄 轉賬');

                row.appendChild(typeCell);

                

                // Account

                const accountCell = document.createElement('td');

                accountCell.className = 'px-6 py-4 whitespace-nowrap';

                accountCell.textContent = getAccountName(transaction.account);

                row.appendChild(accountCell);

                

                // Category

                const categoryCell = document.createElement('td');

                categoryCell.className = 'px-6 py-4 whitespace-nowrap';

                categoryCell.textContent = transaction.category;

                row.appendChild(categoryCell);

                

                // Amount

                const amountCell = document.createElement('td');

                amountCell.className = 'px-6 py-4 whitespace-nowrap';

                if (transaction.type === 'income') {

                    amountCell.classList.add('text-green-600');

                    amountCell.classList.add('font-medium');

                } else if (transaction.type === 'expense') {

                    amountCell.classList.add('text-red-600');

                    amountCell.classList.add('font-medium');

                } else {

                    amountCell.classList.add('text-blue-600');

                    amountCell.classList.add('font-medium');

                }

                amountCell.textContent = '$' + formatNumber(transaction.amount);

                row.appendChild(amountCell);

                

                // Note

                const noteCell = document.createElement('td');

                noteCell.className = 'px-6 py-4 whitespace-nowrap text-gray-500';

                noteCell.textContent = transaction.note || '-';

                row.appendChild(noteCell);

                

                // Action

                const actionCell = document.createElement('td');

                actionCell.className = 'px-6 py-4 whitespace-nowrap text-right text-sm font-medium';

                

                const deleteBtn = document.createElement('button');

                deleteBtn.className = 'text-red-600 hover:text-red-900';

                deleteBtn.textContent = '刪除';

                deleteBtn.addEventListener('click', () => deleteTransaction(transaction.id));

                

                actionCell.appendChild(deleteBtn);

                row.appendChild(actionCell);

                

                resultsList.appendChild(row);

            });

        }

        

        // Delete a transaction

        function deleteTransaction(transactionId) {

            const transaction = transactions.find(t => t.id === transactionId);

            if (!transaction) return;

            

            // Update account balance

            const accountIndex = accounts.findIndex(a => a.id === transaction.account);

            if (accountIndex !== -1) {

                if (transaction.type === 'income') {

                    accounts[accountIndex].balance -= transaction.amount;

                } else if (transaction.type === 'expense') {

                    accounts[accountIndex].balance += transaction.amount;

                } else if (transaction.type === 'transfer') {

                    // Revert transfer

                    accounts[accountIndex].balance += transaction.amount;

                    const toAccountIndex = accounts.findIndex(a => a.id === transaction.toAccount);

                    if (toAccountIndex !== -1) {

                        accounts[toAccountIndex].balance -= transaction.amount;

                    }

                }

            }

            

            // Remove transaction

            transactions = transactions.filter(t => t.id !== transactionId);

            

            saveData('accounts');

            saveData('transactions');

            

            updateAccountsTab();

            updateDashboard();

            searchTransactions();

            

            notify('🗑️', '交易已刪除', '交易記錄已成功刪除。');

        }

        

        // Check if budget alert needed

        function checkBudgetAlert() {

            if (!budget.amount || !budget.alertThreshold) return;

            

            const budgetUsed = getBudgetUsed();

            const budgetPercentage = (budgetUsed / budget.amount) * 100;

            

            if (budgetPercentage >= budget.alertThreshold) {

                notify('⚠️', '預算警告', `您已使用了 ${Math.round(budgetPercentage)}% 的預算。`);

            }

        }

        

        // Show notification

        function notify(icon, title, message) {

            const notificationEl = document.getElementById('notification');

            document.getElementById('notificationIcon').textContent = icon;

            document.getElementById('notificationTitle').textContent = title;

            document.getElementById('notificationMessage').textContent = message;

            

            notificationEl.style.display = 'block';

            

            // Auto-hide notification after 3 seconds

            setTimeout(() => {

                notificationEl.style.display = 'none';

            }, 3000);

        }

        

        // Check for dark mode

        function checkDarkMode() {

            if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {

                document.documentElement.classList.add('dark');

            }

            

            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {

                if (event.matches) {

                    document.documentElement.classList.add('dark');

                } else {

                    document.documentElement.classList.remove('dark');

                }

            });

        }

        

        // Helper functions

        function generateId() {

            return Date.now().toString(36) + Math.random().toString(36).substr(2, 5);

        }

        

        function getAccountName(accountId) {

            const account = accounts.find(a => a.id === accountId);

            return account ? account.name : '未知戶口';

        }

        

        function getTodayFormatted() {

            return formatDateForInput(new Date());

        }

        

        function formatDateForInput(date) {

            const year = date.getFullYear();

            const month = String(date.getMonth() + 1).padStart(2, '0');

            const day = String(date.getDate()).padStart(2, '0');

            return `${year}-${month}-${day}`;

        }

        

        function formatDate(dateString) {

            const date = new Date(dateString);

            const year = date.getFullYear();

            const month = String(date.getMonth() + 1).padStart(2, '0');

            const day = String(date.getDate()).padStart(2, '0');

            return `${year}/${month}/${day}`;

        }

        

        function formatNumber(number) {

            return parseFloat(number).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",");

        }

        

        function getTransactionDate(date) {

            // If new day is active, use today's date

            if (newDayStatus.active) {

                return formatDateForInput(date);

            }

            

            // If not active and it's after midnight but before 4am, use yesterday's date

            const hours = date.getHours();

            if (hours >= 0 && hours < 4) {

                const yesterday = new Date(date);

                yesterday.setDate(yesterday.getDate() - 1);

                return formatDateForInput(yesterday);

            }

            

            // Otherwise use today's date

            return formatDateForInput(date);

        }

        

        function getTotalBalance() {

            return accounts.reduce((sum, account) => sum + account.balance, 0);

        }

        

        function getTodayTransactions() {

            const today = getTodayFormatted();

            return transactions.filter(t => t.date === today)

                .sort((a, b) => new Date(b.date) - new Date(a.date));

        }

        

        function getTodayIncome() {

            return getTodayTransactions()

                .filter(t => t.type === 'income')

                .reduce((sum, t) => sum + parseFloat(t.amount), 0);

        }

        

        function getTodayExpense() {

            return getTodayTransactions()

                .filter(t => t.type === 'expense')

                .reduce((sum, t) => sum + parseFloat(t.amount), 0);

        }

        

        function getRecentTransactions(count) {

            return [...transactions]

                .sort((a, b) => new Date(b.date) - new Date(a.date))

                .slice(0, count);

        }

        

        function getBudgetCycleText() {

            switch (budget.cycle) {

                case 'daily':

                    return '每日';

                case 'weekly':

                    return `每週 (${budget.resetDay} 重設)`;

                case 'monthly':

                    return `每月 (${budget.resetDay}日 重設)`;

                default:

                    return '未設定';

            }

        }

        

        function getBudgetUsed() {

            if (!budget.lastReset) return 0;

            

            const lastReset = new Date(budget.lastReset);

            return transactions

                .filter(t => t.type === 'expense' && new Date(t.date) >= lastReset)

                .reduce((sum, t) => sum + parseFloat(t.amount), 0);

        }

        

        function getBudgetRemaining() {

            return budget.amount - getBudgetUsed();

        }

        

        function getBudgetPercentage() {

            if (!budget.amount) return 0;

            return Math.round((getBudgetUsed() / budget.amount) * 100);

        }

    </script>

</body>

</html>
